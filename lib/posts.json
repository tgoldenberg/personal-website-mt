{ 
mainParagraph : {
	text: "This is the question that separates the wheat from the chaff for programmers. What exactly is an HTTP request? I have found that this question often comes up when interviewing for developer positions. This is because it has many layers of explanation, both superficial and beneath the surface. How a person answers this question can be a decent gauge into how deeply they understand and are willing to explore the process of the Internet." 
	}, 
type : "technical", 
title : "What is an HTTP request?", 
paragraphs : [ 
	{ image_url: "http://www.tannerfriedman.com/blog/wp-content/uploads/2015/02/i-dont-know.jpg", 
	  text : "__What not to do__ <br/><br/>One piece of learned advice: if you are asked this question and not sure how to answer it, don’t make stuff up :). An interviewer is likely to be sympathetic and helpful if you are honest about gaps in your knowledge, whereas if a person pretends to know something by rattling off memorized jargon, it will probably show through. What a web developer needs is not rote memorization of the meanings of acronyms like _HTTP_ and _REST_, but a practical understanding of their functionality. Let’s get started, then, shall we?" 
	}, 
	{ image_url : "http://wiki.hashphp.org/images/6/67/HTTP_Model.jpg",
 	text : "<b>Level 1: Superficial Layer</b><br/><br/>The most fundamental understanding of HTTP involves the __client__ and the __server__. Read this from the official standards publication _RFC 2616: <br/><br/>‘A request message from a client to a server includes, within the first line of that message, the method to be applied to the resource, the identifier of the resource, and the protocol version in use._’ <br/><br/>In other words, the *client* - take a web browser like Chrome or Safari - sends a message to a *server* - e.i., a website like google.com or amazon.com - and that message contains a method, the ‘_uniform resource locator_’, or **URL**, and the version. This usually takes the format of something like `GET /index.html HTTP/1.1`. First we have the action, in this case `GET`. Some commonly used actions are `GET`, `POST`, `PUT`, and `DELETE` (there are other less commonly used ones as well). We also have the URL, in this case `/index.html`. This is the name for that particular web page. Finally, we have the version, which is `HTTP/1.1`. This is the current standardized version of HTTP (for a history of the evolution of HTTP, visit Wikipedia)."
 	}, 
	{ image_url : "https://s3.amazonaws.com/heroku.devcenter/heroku_assets/images/49-original.jpg?1341949601", 
	text : "Oh, and one more thing. There is also a part of the HTTP request called the _headers_. Headers contain essential information related to the request. For example, if a website requires user authentication, then a header may contain an authenticity token to be passed in the headers. This proves the user’s identity. The request headers also provide information about the __User Agent__, another name for your web browser or whatever application you use to make a request (remember, you can also make HTTP requests from the command line using the `curl` command). " 
	},
 	{ image_url : "http://1.bp.blogspot.com/-OtGfF4HToqk/Uid_cHhvxZI/AAAAAAAAAHs/IdamP4XqkDY/s1600/tcpip.png", 
	text : "__Level 2: Beneath the Surface__<br/><br/>On to the next stage. We left off describing the basic functionality of an HTTP request. So, we make an HTTP request from our browser and the server magically feeds us our web page, right? Not exactly. This is a simplification. Beneath the scenes, there is a lot going on. First of all, we should understand that both our computer and the server have distinct IP addresses. IP addresses are either 16-bit or 32-bit numbers, such as 198.199.200.4. If you type `if config` in your terminal window, you can trace back your computer’s IP address. <br/><br/> A _Domain Name System_, or __DNS__, is the way that a text URL like www.google.com is translated into an individual IP address. This is the first step in linking the files from the server to our web browser. Once the web page’s IP address is located,  there are two protocols that direct the communication of resources, namely, the __TCP__ and __IP__ - or Transmission Control Protocol and Internet Protocol. <br/><br/> The Internet Protocol, or IP, is used to establish a connection between the two IP addresses, and the Transmission Control Protocol (TCP) is responsible for sending over the information in byte-sized packets (these packets are generally below 1000Kb). This is analogous to a shipping company that wishes to send over an extremely large object, like a house. Most likely, the house won’t be sent over as-is, but will be separated into smaller parts to facilitate the shipping process. Similarly, the TCP breaks down the server’s data into packets that are then delivered to the IP address on the client’s side. This whole process is usually called TCP/IP. " 
	},
 	{text : "__Why is this Useful?__<br/><br/>By now, you may be thinking, what is the use of all this information? Well, understanding HTTP can really help to demystify the process of web development and make us better developers. When we are making an __AJAX__ request, for example, we can understand more exactly what is happening behind the scenes and how we are manipulating data. Take the following snippet in *jQuery* - `$.ajax({method: ‘GET’, action: ‘/index.html’, dataType: ‘json’})`. We can already see that the request is specifying the action and URL - two of the three main components of an HTTP request. <br/><br/>Understanding web protocols can also help in other areas, such as deploying to a web server. In deployment, one has to actually configure the link between an IP address and a domain name, another concept that was touched upon. I am by no means an expert in the area of HTTP, but I hope this post was helpful in some way. Happy coding!" } ]}

{
	mainParagraph : {
		text: ""
	},
	type: "technical",
	title: "technical",
	paragraphs: [
		{
			text: "__Alright, let’s get started__. The first thing is to install the necessary gems and build the models that we’ll need for this example application. The theme to our app will be a puppy adoption center, where our site hosts sellers and takes a percentage of each transaction. The gems we will be using are featured on the right, and include `devise` for authentication, `haml-rails` for our layout, `bourbon` and `neat` for our CSS, `figaro` to store our environment variables, and the `stripe` and `omniauth-stripe-connect` gems for managing our payments through __Stripe__.",
			gist: "",
			image_url: "https://raw.githubusercontent.com/tgoldenberg/Buy-A-Dog-with-Stripe/master/app/assets/images/screen1.png"			
		},
		{
			text: "Now we can create our models and controllers. On the right, you will see the command-line commands for creating our home page controller as well as our devise User model, a scaffold for the puppies resource, and last, our charges model. In our model files, we create the necessary associations, so that we can associate a puppy with a user - `puppy.user` - a charge with a buyer and seller – `charge.user` and `charge.vendor` – and likewise, – `user.received_charges` and `user.paid_charges`. Below you can see what our home page will look like when a customer clicks to buy a puppy.<br/>Now to get setup with __Stripe__, you should first create an account at <a href='https://stripe.com/'>stripe.com</a>. There you’ll get a set of keys, both for testing and for when your website is ready to launch. Here we’ll be dealing with test mode. Once you have your publishable and secret keys, you’ll want to use the `figaro` gem to encrypt that information so that it isn’t passed into your git commits and Github. Check out figaro’s documentation <a href='https://github.com/laserlemon/figaro'>here</a>.",
			gist: "79e2039eb319065c1cd6",
			image_url: ""
		},
		{
			text: "Once that is done, since we are using `devise`, we should adjust our `initializers/devise.rb` file, and create a `stripe.rb` file in our `config/initializers` folder. In out `routes.rb` file, you’ll see that we’ve configured our devise routes to include an `omniauth_callback controller`. We’ve also included a `charges#complete` controller action to allow us to create delayed payments. This way our buyers are charged only upon successful completion of the terms of service.<br/><br/>For filling in the credit card information, you will want to look at Stripe’s documentation on its Checkout page. This makes it easy to integrate at first, but as you will see, there are a few ‘gotchas’. With Stripe Checkout, we can have a website-to-customer interaction, but what if we want to host transactions between 2 users, similar to an Amazon? Or what if we don’t want to charge our customer right away, but want to keep their information and charge them after the service delivery? To the left is my attempt to integrate a solution to these issues.<br/><br/>First you will see the `omniauth_callbacks controller` file. This is to allow our users to register their Stripe accounts in order to be sellers. This is accomplished through the `omniauth_stripe_connect` gem. More information on the __Stripe Connect__ options can be found here. Once your user passes through the authorization, they will become connected accounts on your Stripe dashboard.",
			gist: "410032261ebd783b8b07",
			image_url: ""
		},
		{
			text: "Next we can see that in our charges controller, we have made a few changes. Compare this to the Stripe example here. We have seperated the `Stripe::Customer.create` and `Stripe::Charge.create` actions into two seperate controller actions - `create` and `complete`. In the create action, we save our user’s information in the charge model of our database. Once it is time to charge our customer, we call the complete action with parameters for the destination and user token. If we look in our Stripe dashboard, we will be able to see the transaction transferring money to our seller, and an application fee ( defined in the `charges#complete` action) to us.<br/><br/>Well, that’s about it for creating payments with __Stripe__. I hope you enjoyed this blog post. Please share your comments below. I am by no means an expert, and welcome corrections / improvements. Also, for the full repo, visit my Github site <a href='https://www.github.com/tgoldenberg' >here</a>. Happy coding!",
			gist: "437f58f168f9e84788af",
			image_url: ""
		}
	]
}