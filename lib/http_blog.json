{ 
mainParagraph : {
	text: "This is the question that separates the wheat from the chaff for programmers. What exactly is an HTTP request? I have found that this question often comes up when interviewing for developer positions. This is because it has many layers of explanation, both superficial and beneath the surface. How a person answers this question can be a decent gauge into how deeply they understand and are willing to explore the process of the Internet." 
	}, 
type : "technical", 
title : "What is an HTTP request?", 
paragraphs : [ 
	{ image_url: "http://www.tannerfriedman.com/blog/wp-content/uploads/2015/02/i-dont-know.jpg", 
	  text : "__What not to do__ <br/><br/>One piece of learned advice: if you are asked this question and not sure how to answer it, don’t make stuff up :). An interviewer is likely to be sympathetic and helpful if you are honest about gaps in your knowledge, whereas if a person pretends to know something by rattling off memorized jargon, it will probably show through. What a web developer needs is not rote memorization of the meanings of acronyms like _HTTP_ and _REST_, but a practical understanding of their functionality. Let’s get started, then, shall we?" 
	}, 
	{ image_url : "http://wiki.hashphp.org/images/6/67/HTTP_Model.jpg",
 	text : "<b>Level 1: Superficial Layer</b><br/><br/>The most fundamental understanding of HTTP involves the __client__ and the __server__. Read this from the official standards publication _RFC 2616: <br/><br/>‘A request message from a client to a server includes, within the first line of that message, the method to be applied to the resource, the identifier of the resource, and the protocol version in use._’ <br/><br/>In other words, the *client* - take a web browser like Chrome or Safari - sends a message to a *server* - e.i., a website like google.com or amazon.com - and that message contains a method, the ‘_uniform resource locator_’, or **URL**, and the version. This usually takes the format of something like `GET /index.html HTTP/1.1`. First we have the action, in this case `GET`. Some commonly used actions are `GET`, `POST`, `PUT`, and `DELETE` (there are other less commonly used ones as well). We also have the URL, in this case `/index.html`. This is the name for that particular web page. Finally, we have the version, which is `HTTP/1.1`. This is the current standardized version of HTTP (for a history of the evolution of HTTP, visit Wikipedia)."
 	}, 
	{ image_url : "https://s3.amazonaws.com/heroku.devcenter/heroku_assets/images/49-original.jpg?1341949601", 
	text : "Oh, and one more thing. There is also a part of the HTTP request called the _headers_. Headers contain essential information related to the request. For example, if a website requires user authentication, then a header may contain an authenticity token to be passed in the headers. This proves the user’s identity. The request headers also provide information about the __User Agent__, another name for your web browser or whatever application you use to make a request (remember, you can also make HTTP requests from the command line using the `curl` command). " 
	},
 	{ image_url : "http://1.bp.blogspot.com/-OtGfF4HToqk/Uid_cHhvxZI/AAAAAAAAAHs/IdamP4XqkDY/s1600/tcpip.png", 
	text : "__Level 2: Beneath the Surface__<br/><br/>On to the next stage. We left off describing the basic functionality of an HTTP request. So, we make an HTTP request from our browser and the server magically feeds us our web page, right? Not exactly. This is a simplification. Beneath the scenes, there is a lot going on. First of all, we should understand that both our computer and the server have distinct IP addresses. IP addresses are either 16-bit or 32-bit numbers, such as 198.199.200.4. If you type `if config` in your terminal window, you can trace back your computer’s IP address. <br/><br/> A _Domain Name System_, or __DNS__, is the way that a text URL like www.google.com is translated into an individual IP address. This is the first step in linking the files from the server to our web browser. Once the web page’s IP address is located,  there are two protocols that direct the communication of resources, namely, the __TCP__ and __IP__ - or Transmission Control Protocol and Internet Protocol. <br/><br/> The Internet Protocol, or IP, is used to establish a connection between the two IP addresses, and the Transmission Control Protocol (TCP) is responsible for sending over the information in byte-sized packets (these packets are generally below 1000Kb). This is analogous to a shipping company that wishes to send over an extremely large object, like a house. Most likely, the house won’t be sent over as-is, but will be separated into smaller parts to facilitate the shipping process. Similarly, the TCP breaks down the server’s data into packets that are then delivered to the IP address on the client’s side. This whole process is usually called TCP/IP. " 
	},
 	{text : "__Why is this Useful?__<br/><br/>By now, you may be thinking, what is the use of all this information? Well, understanding HTTP can really help to demystify the process of web development and make us better developers. When we are making an __AJAX__ request, for example, we can understand more exactly what is happening behind the scenes and how we are manipulating data. Take the following snippet in *jQuery* - `$.ajax({method: ‘GET’, action: ‘/index.html’, dataType: ‘json’})`. We can already see that the request is specifying the action and URL - two of the three main components of an HTTP request. <br/><br/>Understanding web protocols can also help in other areas, such as deploying to a web server. In deployment, one has to actually configure the link between an IP address and a domain name, another concept that was touched upon. I am by no means an expert in the area of HTTP, but I hope this post was helpful in some way. Happy coding!" } ]}
